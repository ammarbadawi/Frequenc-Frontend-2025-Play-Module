// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  email             String    @unique
  password          String
  name              String
  phone             String?
  location          String?
  bio               String?
  skillLevel        SkillLevel? @default(BEGINNER)
  avatarUrl         String?
  role              UserRole  @default(PLAYER)
  emailVerified     Boolean   @default(false)
  verificationToken String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  bookings          Booking[]
  payments          Payment[]
  reviews           Review[]
  notifications     Notification[]
  friends           Friendship[] @relation("UserFriends")
  friendsOf         Friendship[] @relation("FriendsUser")
  gameParticipants  GameParticipant[]
  cartItems         CartItem[]
  favorites         Favorite[]
  profile           UserProfile?
  stats             UserStats?
  achievements      UserAchievement[]
  orders            Order[]
}

// Venue Management
model Venue {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  address     String
  latitude    Float
  longitude   Float
  description String
  phone       String?
  email       String?
  imageUrl    String?
  gallery     String[]
  amenities   String[]
  openingTime String
  closingTime String
  rating      Float?   @default(0)
  reviewCount Int      @default(0)
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  courts      Court[]
  reviews     Review[]
}

model Court {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  sportType   SportType
  surface     CourtSurface
  type        CourtType
  hourlyRate  Float
  isAvailable Boolean      @default(true)
  description String?
  images      String[]
  venueId     String       @db.ObjectId
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  venue       Venue        @relation(fields: [venueId], references: [id], onDelete: Cascade)
  bookings    Booking[]
  timeSlots   TimeSlot[]
}

// Booking Management
model Booking {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  courtId    String        @db.ObjectId
  userId     String        @db.ObjectId
  date       String
  startTime  String
  endTime    String
  duration   Int
  totalPrice Float
  status     BookingStatus @default(PENDING)
  gameType   GameType
  notes      String?
  playerIds  String[]
  isPublic   Boolean       @default(false)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // Relations
  court      Court         @relation(fields: [courtId], references: [id], onDelete: Cascade)
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments   Payment[]
  game       Game?
}

model TimeSlot {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  time      String
  available Boolean  @default(true)
  price     Float
  courtId   String   @db.ObjectId
  date      String
  bookingId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  court     Court    @relation(fields: [courtId], references: [id], onDelete: Cascade)
}

// Game Management
model Game {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  bookingId   String   @unique @db.ObjectId
  title       String
  description String?
  maxPlayers  Int
  currentPlayers Int   @default(0)
  isPublic    Boolean  @default(true)
  skillLevel  SkillLevel?
  status      GameStatus @default(UPCOMING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  booking     Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  participants GameParticipant[]
}

model GameParticipant {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  gameId   String @db.ObjectId
  userId   String @db.ObjectId
  role     PlayerRole @default(PLAYER)
  joinedAt DateTime @default(now())

  // Relations
  game     Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([gameId, userId])
}

// Payment Management
model Payment {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  amount          Float
  currency        Currency      @default(USD)
  bookingId       String        @db.ObjectId
  userId          String        @db.ObjectId
  status          PaymentStatus @default(PENDING)
  paymentMethod   PaymentMethod
  description     String?
  paymentIntentId String?
  paymentMethodId String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  booking         Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Cart Management
model CartItem {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  name     String
  venue    String?
  date     String?
  time     String?
  price    Float
  quantity Int    @default(1)
  image    String?
  type     String
  brand    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Review Management
model Review {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  rating   Int
  comment  String
  venueId  String @db.ObjectId
  userId   String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  venue    Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([venueId, userId])
}

// Notification Management
model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Social Features
model Friendship {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  friendId  String   @db.ObjectId
  status    FriendshipStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend    User     @relation("FriendsUser", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
}

// Favorites
model Favorite {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  type     String // 'venue', 'court', 'game'
  itemId   String
  createdAt DateTime @default(now())

  // Relations
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, itemId])
}

// User Profile Management
model UserProfile {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String @unique @db.ObjectId
  bio         String?
  location    String?
  skillLevel  SkillLevel?
  achievements String[]
  stats       Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserStats {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String @unique @db.ObjectId
  gamesPlayed Int    @default(0)
  gamesWon    Int    @default(0)
  totalHours  Float  @default(0)
  averageRating Float @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserAchievement {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String @db.ObjectId
  name        String
  description String
  icon        String?
  unlockedAt  DateTime @default(now())

  // Relations
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Marketplace Management
model Product {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  category    String
  stock       Int    @default(0)
  images      String[]
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orderItems  OrderItem[]
}

model Order {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  userId          String @db.ObjectId
  total           Float
  status          String @default("PENDING")
  paymentMethod   String
  shippingAddress Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items           OrderItem[]
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String @db.ObjectId
  productId String @db.ObjectId
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// Enums
enum UserRole {
  PLAYER
  VENUE_OWNER
  ADMIN
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  PROFESSIONAL
}

enum SportType {
  TENNIS
  GOLF
  BASKETBALL
  SOCCER
  SWIMMING
  BADMINTON
  SQUASH
  TABLE_TENNIS
}

enum CourtSurface {
  HARD
  CLAY
  GRASS
  CARPET
  CONCRETE
}

enum CourtType {
  INDOOR
  OUTDOOR
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum GameType {
  SINGLES
  DOUBLES
  MIXED
}

enum GameStatus {
  UPCOMING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PlayerRole {
  HOST
  PLAYER
  SPECTATOR
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  DIGITAL_WALLET
}

enum Currency {
  USD
  EUR
  GBP
}

enum NotificationType {
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  GAME_INVITATION
  FRIEND_REQUEST
  SYSTEM_MESSAGE
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
} 